-- Enable the PostgreSQL cryptographic extension
create extension if not exists "pgcrypto";

-- Create auth schema if it doesn't exist
create schema if not exists auth;

-- Create the user_profiles table
create table if not exists public.user_profiles (
  id uuid references auth.users primary key,
  role text check (role in ('admin', 'cashier')) not null default 'cashier',
  full_name text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Enable Row Level Security
alter table public.user_profiles enable row level security;

-- Create policies
create policy "Users can view own profile"
  on public.user_profiles for select
  using (auth.uid() = id);

create policy "Admins can view all profiles"
  on public.user_profiles for select
  using (
    auth.uid() in (
      select id from public.user_profiles where role = 'admin'
    )
  );

create policy "Admins can insert profiles"
  on public.user_profiles for insert
  with check (
    auth.uid() in (
      select id from public.user_profiles where role = 'admin'
    )
  );

create policy "Admins can update profiles"
  on public.user_profiles for update
  using (
    auth.uid() in (
      select id from public.user_profiles where role = 'admin'
    )
  );

-- Function to automatically update updated_at timestamp
create or replace function public.handle_updated_at()
returns trigger
language plpgsql
as $$
begin
  new.updated_at = timezone('utc'::text, now());
  return new;
end;
$$;

-- Trigger to automatically update updated_at
create trigger handle_updated_at
  before update on public.user_profiles
  for each row
  execute function public.handle_updated_at();

-- Function to handle new user signups
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.user_profiles (id, role, full_name)
  values (
    new.id,
    case when not exists (select 1 from public.user_profiles) then 'admin' else 'cashier' end,
    coalesce(new.raw_user_meta_data->>'full_name', 'User')
  );
  return new;
end;
$$;

-- Trigger for new user creation
drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute function public.handle_new_user();