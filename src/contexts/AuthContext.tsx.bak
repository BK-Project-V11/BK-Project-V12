import { createContext, useContext, useEffect, useState } from 'react';
import { supabase } from '../lib/supabase';
import { Session, User } from '@supabase/supabase-js';
import { initializeDatabase } from '../lib/initDatabase';
import { toast } from '../hooks/use-toast';

interface SignUpData {
  email: string;
  username: string;
  password: string;
  confirmPassword: string;
  fullName: string;
  phoneNumber: string;
  address: string;
  role?: string;
  acceptTerms: boolean;
}

interface AuthContextType {
  session: Session | null;
  user: User | null;
  signIn: (identifier: string, password: string) => Promise<void>;
  signUp: (data: SignUpData) => Promise<{ user: User | null; session: Session | null }>;
  signOut: () => Promise<void>;
  loading: boolean;
  validatePassword: (password: string) => {
    isValid: boolean;
    score: number;
    feedback: string[];
  };
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [session, setSession] = useState<Session | null>(null);
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Get initial session
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
      setUser(session?.user ?? null);
      setLoading(false);
    });

    // Listen for auth changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
      setUser(session?.user ?? null);
      setLoading(false);
    });

    return () => subscription.unsubscribe();
  }, []);

  const signIn = async (identifier: string, password: string) => {
    try {
      // Check if identifier is email or username
      const isEmail = identifier.includes('@');
      let loginEmail = identifier;

      if (!isEmail) {
        // If using username, get email from database
        const { data, error } = await supabase
          .from('users')
          .select('email')
          .eq('username', identifier)
          .single();

        if (error || !data) {
          throw new Error('Invalid login credentials');
        }
        loginEmail = data.email;
      }

      const { error } = await supabase.auth.signInWithPassword({ 
        email: loginEmail, 
        password 
      });
      
      if (error) throw error;
      
      // Initialize database with default values if needed
      await initializeDatabase();
    } catch (error) {
      throw error;
    }  const validatePassword = (password: string) => {
    const feedback: string[] = [];
    let score = 0;

    // Minimal 8 karakter
    if (password.length >= 8) score += 1;
    else feedback.push('Password harus minimal 8 karakter');

    // Harus ada angka
    if (/[0-9]/.test(password)) score += 1;
    else feedback.push('Password harus mengandung angka');

    return {
      isValid: score >= 2, // Hanya perlu memenuhi kedua kriteria
      score,
      feedback
    };
  };

  const signUp = async (data: SignUpData) => {
    try {
      // Validasi input
      if (!data.email || !data.password || !data.fullName) {
        toast({
          title: 'Input Error',
          description: 'Semua field harus diisi',
          variant: 'destructive',
        });
        throw new Error('Semua field harus diisi');
      }

      // Validasi Terms & Conditions
      if (!data.acceptTerms) {
        toast({
          title: 'Terms & Conditions',
          description: 'Anda harus menyetujui syarat dan ketentuan',
          variant: 'destructive',
        });
        throw new Error('Anda harus menyetujui syarat dan ketentuan');
      }

      // Validasi konfirmasi password
      if (data.password !== data.confirmPassword) {
        toast({
          title: 'Password Error',
          description: 'Password dan konfirmasi password tidak sama',
          variant: 'destructive',
        });
        throw new Error('Password dan konfirmasi password tidak sama');
      }

      // Validasi kekuatan password
      const passwordValidation = validatePassword(data.password);
      if (!passwordValidation.isValid) {
        toast({
          title: 'Password Lemah',
          description: passwordValidation.feedback.join('\n'),
          variant: 'destructive',
        });
        throw new Error('Password tidak memenuhi kriteria keamanan');
      }

      // Show loading toast
      toast({
        title: 'Mendaftarkan akun...',
        description: 'Mohon tunggu sebentar',
      });

      const { error, data: authData } = await supabase.auth.signUp({
        email: data.email,
        password: data.password,
        options: {
          data: {
            role: data.role || 'cashier',
            full_name: data.fullName,
            created_at: new Date().toISOString(),
            email_verified: false,
            terms_accepted: true,
            terms_accepted_at: new Date().toISOString()
          },
          emailRedirectTo: `${window.location.origin}/auth/callback`
        }
      });
      
      if (error) {
        // Transform Supabase error messages to be more user-friendly
        if (error.message.includes('unique constraint')) {
          toast({
            title: 'Email sudah terdaftar',
            description: 'Silakan gunakan email lain atau login dengan email ini',
            variant: 'destructive',
          });
          throw new Error('Email sudah terdaftar');
        }

        if (error.message.includes('password')) {
          toast({
            title: 'Password Error',
            description: 'Password tidak memenuhi kriteria keamanan',
            variant: 'destructive',
          });
          throw new Error('Password tidak memenuhi kriteria keamanan');
        }

        toast({
          title: 'Pendaftaran Gagal',
          description: error.message,
          variant: 'destructive',
        });
        throw error;
      }

      if (!authData.user) {
        toast({
          title: 'Pendaftaran Gagal',
          description: 'Gagal membuat akun, silakan coba lagi',
          variant: 'destructive',
        });
        throw new Error('Gagal membuat akun');
      }

      // Create user profile in database
      const { error: profileError } = await supabase
        .from('users')
        .insert([
          {
            id: user.id,
            email: data.email,
            username: data.username,
            full_name: data.fullName,
            phone_number: data.phoneNumber,
            address: data.address,
            role: data.role || 'cashier',
          },
        ]);

      if (profileError) {
        console.error('Error creating profile:', profileError);
        // Don't throw here, profile will be created by trigger
      }

      // Success toast with more informative message
      toast({
        title: 'Pendaftaran Berhasil! ðŸŽ‰',
        description: 'Silakan cek email Anda untuk verifikasi akun. Link verifikasi akan kadaluarsa dalam 24 jam.',
      });

      // Send another toast with next steps
      setTimeout(() => {
        toast({
          title: 'Langkah Selanjutnya',
          description: '1. Buka email Anda\n2. Klik link verifikasi\n3. Setelah terverifikasi, Anda bisa login',
        });
      }, 1000);

      // Do not automatically sign in - wait for email verification
      return {
        user: authData.user,
        session: authData.session
      };
    } catch (error) {
      // Handle any uncaught errors
      console.error('Sign up error:', error);
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Terjadi kesalahan saat mendaftar',
        variant: 'destructive',
      });
      throw error;
    }
  };

  const signOut = async () => {
    const { error } = await supabase.auth.signOut();
    if (error) throw error;
  };

  const value = {
    session,
    user,
    signIn,
    signUp,
    signOut,
    loading,
    validatePassword,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}