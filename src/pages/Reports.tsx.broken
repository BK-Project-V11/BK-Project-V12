import { useState, useEffect } from 'react';import { useState, useEffect } from 'react';

import { useNavigate } from 'react-router-dom';import { useNavigate } from 'react-router-dom';

import { useAuth } from '@/contexts/AuthContext';import { useAuth } from '@/contexts/AuthContext';

import { usePOS } from '@/contexts/POSContext';import { usePOS } from '@/contexts/POSContext';

import { supabase } from '@/lib/supabase';import { supabase } from '@/lib/supabase';

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

import { Button } from '@/components/ui/button';import { Button } from '@/components/ui/button';

import { Badge } from '@/components/ui/badge';import { Badge } from '@/components/ui/badge';

import { MetricCard } from '@/components/ui/metric-card';import { MetricCard } from '@/components/ui/metric-card';

import {import {

  Dialog,  Dialog,

  DialogContent,  DialogContent,

  DialogDescription,  DialogDescription,

  DialogHeader,  DialogHeader,

  DialogTitle,  DialogTitle,

  DialogTrigger,  DialogTrigger,

} from '@/components/ui/dialog';} from '@/components/ui/dialog';

import {import {

  DropdownMenu,  DropdownMenu,

  DropdownMenuContent,  DropdownMenuContent,

  DropdownMenuItem,  DropdownMenuItem,

  DropdownMenuTrigger,  DropdownMenuTrigger,

} from "@/components/ui/dropdown-menu";} from "@/components/ui/dropdown-menu";

import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';

import {import {

  Download,  Download,

  Edit,  Edit,

  Trash2,  Trash2,

  Eye,  Eye,

  TrendingUp,  TrendingUp,

  DollarSign,  DollarSign,

  Package,  Package,

  ShoppingCart,  ShoppingCart,

  CreditCard,  CreditCard,

  Receipt,  Receipt,

  Users,  Users,

} from 'lucide-react';} from 'lucide-react';

import { toast } from '@/hooks/use-toast';import { toast } from '@/hooks/use-toast';

import type { Sale } from '@/contexts/POSContext';import type { Sale } from '@/contexts/POSContext';



const Reports = () => {const Reports = () => {

  const navigate = useNavigate();  const navigate = useNavigate();

  const { session } = useAuth();  const { session } = useAuth();

  const [sales, setSales] = useState<Sale[]>([]);  const [sales, setSales] = useState<Sale[]>([]);

  const [loading, setLoading] = useState(true);  const [loading, setLoading] = useState(true);

    

  useEffect(() => {  useEffect(() => {

    const init = async () => {    const init = async () => {

      try {      try {

        if (!session) {        if (!session) {

          throw new Error('No active session');          throw new Error('No active session');

        }        }



        const { data: { session: currentSession }, error: sessionError } = await supabase.auth.getSession();        const { data: { session: currentSession }, error: sessionError } = await supabase.auth.getSession();

        if (sessionError || !currentSession) {        if (sessionError || !currentSession) {

          throw new Error('Invalid session');          throw new Error('Invalid session');

        }        }



        await fetchSales();        await fetchSales();

      } catch (error) {      } catch (error) {

        console.error('Session/initialization error:', error);        console.error('Session/initialization error:', error);

                

        toast({        toast({

          title: "Authentication Error",          title: "Authentication Error",

          description: error instanceof Error ? error.message : "Please login again to continue",          description: error instanceof Error ? error.message : "Please login again to continue",

          variant: "destructive"          variant: "destructive"

        });        });



        navigate('/login', { replace: true });        navigate('/login', { replace: true });

      }      }

    };    };



    init();    init();

  }, [session, navigate]);  }, [session, navigate]);



  const fetchSales = async () => {  const fetchSales = async () => {

    try {    try {

      setLoading(true);      setLoading(true);



      const { data, error } = await supabase      const { data, error } = await supabase

        .from('sales')        .from('sales')

        .select(`        .select(`

          *,          *,

          sales_taxes(          sales_taxes(

            *,            *,

            tax_types(            tax_types(

              *              *

            )            )

          ),          ),

          sale_items(          sale_items(

            *,            *,

            product:products(            product:products(

              id,              id,

              name,              name,

              price,              price,

              sku              sku

            )            )

          )          )

        `)        `)

        .order('created_at', { ascending: false });        .order('created_at', { ascending: false });



      if (error) {      if (error) {

        switch (error.code) {        switch (error.code) {

          case 'PGRST301':          case 'PGRST301':

          case '401':          case '401':

            throw new Error('Sesi telah berakhir. Silakan login kembali.');            throw new Error('Sesi telah berakhir. Silakan login kembali.');

          case 'PGRST404':          case 'PGRST404':

            throw new Error('Data penjualan tidak ditemukan.');            throw new Error('Data penjualan tidak ditemukan.');

          default:          default:

            throw new Error(error.message);            throw new Error(error.message);

        }        }

      }      }



      if (!data) {      if (!data) {

        throw new Error('Tidak ada data yang diterima dari server');        throw new Error('Tidak ada data yang diterima dari server');

      }      }



      setSales(data);      setSales(data);

    } catch (error) {    } catch (error) {

      console.error('Error fetching sales:', error);      console.error('Error fetching sales:', error);

            

      const errorMessage = error instanceof Error       const errorMessage = error instanceof Error 

        ? error.message         ? error.message 

        : 'Gagal mengambil data penjualan';        : 'Gagal mengambil data penjualan';

            

      toast({      toast({

        title: 'Error',        title: 'Error',

        description: errorMessage,        description: errorMessage,

        variant: 'destructive',        variant: 'destructive',

      });      });



      if (      if (

        error instanceof Error &&         error instanceof Error && 

        (error.message.includes('login') || error.message.includes('sesi'))        (error.message.includes('login') || error.message.includes('sesi'))

      ) {      ) {

        navigate('/login', { replace: true });        navigate('/login', { replace: true });

      }      }



      throw error;      throw error;

    } finally {    } finally {

      setLoading(false);      setLoading(false);

    }    }

  };  };



  // Calculate summary data with only enabled taxes  // Calculate summary data

  const totalRevenue = sales.reduce((sum, sale) => {  const totalRevenue = sales.reduce((sum, sale) => {

    // Only include enabled taxes in revenue calculation    // Only include enabled taxes in revenue calculation

    const taxAmount = (sale.sales_taxes || [])    const taxAmount = (sale.sales_taxes || [])

      .filter(tax => tax.tax_types?.enabled ?? false)      .filter(tax => tax.tax_types?.enabled ?? false)

      .reduce((taxSum, tax) => taxSum + (Number(tax.tax_amount) || 0), 0);      .reduce((taxSum, tax) => taxSum + (Number(tax.tax_amount) || 0), 0);

        

    const subtotal = (sale.sale_items || []).reduce((itemSum, item) =>     const subtotal = (sale.sale_items || []).reduce((itemSum, item) => 

      itemSum + ((Number(item.price_at_time) || 0) * (Number(item.quantity) || 0)), 0);      itemSum + ((Number(item.price_at_time) || 0) * (Number(item.quantity) || 0)), 0);

        

    return sum + subtotal + taxAmount;    return sum + subtotal + taxAmount;

  }, 0);  }, 0);



  const totalTransactions = sales.length;  const totalTransactions = sales.length;

  const totalItemsSold = sales.reduce((sum, sale) =>   const totalItemsSold = sales.reduce((sum, sale) => 

    sum + (Array.isArray(sale.sale_items) ? sale.sale_items.reduce((itemSum, item) =>     sum + (Array.isArray(sale.sale_items) ? sale.sale_items.reduce((itemSum, item) => 

      itemSum + (Number(item.quantity) || 0), 0) : 0), 0);      itemSum + (Number(item.quantity) || 0), 0) : 0), 0);



  // Calculate payment method stats  // Calculate payment method stats

  const paymentStats = sales.reduce((acc, sale) => {  const paymentStats = sales.reduce((acc, sale) => {

    acc[sale.payment_method] = (acc[sale.payment_method] || 0) + 1;    acc[sale.payment_method] = (acc[sale.payment_method] || 0) + 1;

    return acc;    return acc;

  }, {} as Record<string, number>);  }, {} as Record<string, number>);



  // Calculate today's stats with only enabled taxes  // Calculate today's stats

  const todayStats = sales  const todayStats = sales

    .filter(sale => {    .filter(sale => {

      const saleDate = new Date(sale.created_at);      const saleDate = new Date(sale.created_at);

      const today = new Date();      const today = new Date();

      return (      return (

        saleDate.getDate() === today.getDate() &&        saleDate.getDate() === today.getDate() &&

        saleDate.getMonth() === today.getMonth() &&        saleDate.getMonth() === today.getMonth() &&

        saleDate.getFullYear() === today.getFullYear()        saleDate.getFullYear() === today.getFullYear()

      );      );

    })    })

    .reduce(    .reduce(

      (acc, sale) => {      (acc, sale) => {

        // Only include enabled taxes in today's revenue        // Only include enabled taxes in today's revenue

        const taxAmount = (sale.sales_taxes || [])        const taxAmount = (sale.sales_taxes || [])

          .filter(tax => tax.tax_types?.enabled ?? false)          .filter(tax => tax.tax_types?.enabled ?? false)

          .reduce((sum, tax) => sum + (Number(tax.tax_amount) || 0), 0);          .reduce((sum, tax) => sum + (Number(tax.tax_amount) || 0), 0);

                

        const subtotal = (sale.sale_items || []).reduce((sum, item) =>         const subtotal = (sale.sale_items || []).reduce((sum, item) => 

          sum + ((Number(item.price_at_time) || 0) * (Number(item.quantity) || 0)), 0);          sum + ((Number(item.price_at_time) || 0) * (Number(item.quantity) || 0)), 0);

                

        acc.revenue += subtotal + taxAmount;        acc.revenue += subtotal + taxAmount;

        acc.transactions += 1;        acc.transactions += 1;

        acc.items += (sale.sale_items || []).reduce(        acc.items += (sale.sale_items || []).reduce(

          (sum, item) => sum + (Number(item.quantity) || 0),          (sum, item) => sum + (Number(item.quantity) || 0),

          0          0

        );        );

        return acc;        return acc;

      },      },

      { revenue: 0, transactions: 0, items: 0 }      { revenue: 0, transactions: 0, items: 0 }

    );    );



  // Format currency helper  // Format currency helper

  const formatCurrency = (amount: number) => {  const formatCurrency = (amount: number) => {

    return new Intl.NumberFormat('id-ID', {    return new Intl.NumberFormat('id-ID', {

      style: 'currency',      style: 'currency',

      currency: 'IDR',      currency: 'IDR',

      minimumFractionDigits: 0,      minimumFractionDigits: 0,

      maximumFractionDigits: 0      maximumFractionDigits: 0

    }).format(amount);    }).format(amount);

  };  };



  // Calculate trends  // Calculate trends

  const getTrendPercentage = (current: number, total: number) => {  const getTrendPercentage = (current: number, total: number) => {

    if (total === 0 || current === 0) return 0;    if (total === 0 || current === 0) return 0;

    return ((current / total) * 100);    return ((current / total) * 100);

  };  };



  const formatDateToLocale = (date: string) => {  const formatDateToLocale = (date: string) => {

    return new Date(date).toLocaleDateString('id-ID');    return new Date(date).toLocaleDateString('id-ID');

  };  };



  // Download functionality for product report  // Download functionality for summary report

  const downloadProductReport = () => {  const downloadSummaryReport = () => {

    const csvContent = generateProductCSV(sales);    const csvContent = generateSummaryCSV(sales);

    downloadCSV(csvContent, 'ringkasan-per-produk');    downloadCSV(csvContent, 'laporan-per-transaksi');

  };  };



  // Download functionality for summary report  // Download functionality for product report

  const downloadSummaryReport = () => {  const downloadProductReport = () => {

    const csvContent = generateSummaryCSV(sales);    const csvContent = generateProductCSV(sales);

    downloadCSV(csvContent, 'laporan-per-transaksi');    downloadCSV(csvContent, 'ringkasan-per-produk');

  };  };



  const downloadCSV = (content: string, filePrefix: string) => {  const downloadCSV = (content: string, filePrefix: string) => {

    const blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });    const blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });

    const link = document.createElement('a');    const link = document.createElement('a');

    const url = URL.createObjectURL(blob);    const url = URL.createObjectURL(blob);

        

    link.setAttribute('href', url);    link.setAttribute('href', url);

    link.setAttribute('download', `${filePrefix}-${new Date().toISOString().split('T')[0]}.csv`);    link.setAttribute('download', `${filePrefix}-${new Date().toISOString().split('T')[0]}.csv`);

    document.body.appendChild(link);    document.body.appendChild(link);

    link.click();    link.click();

    document.body.removeChild(link);    document.body.removeChild(link);

    URL.revokeObjectURL(url);    URL.revokeObjectURL(url);

  };  };



  const generateSummaryCSV = (sales: Sale[]) => {  const generateSummaryCSV = (sales: Sale[]) => {

    const headers = [    const headers = [

      'Tanggal',      'Tanggal',

      'No. Invoice',      'No. Invoice',

      'Nama Produk',      'Nama Produk',

      'Harga Satuan',      'Harga Satuan',

      'Jumlah',      'Jumlah',

      'Subtotal',      'Subtotal',

      'Pajak',      'Pajak',

      'Total',      'Total',

      'Pembayaran',      'Pembayaran',

      'Kembalian'      'Kembalian'

    ].join(',');    ].join(',');



    const rows = sales.flatMap(sale => {    const rows = sales.flatMap(sale => {

      // Only include enabled taxes      // Only include enabled taxes

      const taxes = (sale.sales_taxes || [])      const taxes = (sale.sales_taxes || [])

        .filter(tax => tax.tax_types?.enabled ?? false)        .filter(tax => tax.tax_types?.enabled ?? false)

        .reduce((sum, tax) => sum + (Number(tax.tax_amount) || 0), 0);        .reduce((sum, tax) => sum + (Number(tax.tax_amount) || 0), 0);

      const totalItems = (sale.sale_items || []).reduce((sum, item) => sum + (Number(item.quantity) || 0), 0);      const totalItems = (sale.sale_items || []).reduce((sum, item) => sum + (Number(item.quantity) || 0), 0);

      const taxPerItem = totalItems > 0 ? taxes / totalItems : 0; // Distribute tax evenly across items      const taxPerItem = totalItems > 0 ? taxes / totalItems : 0; // Distribute tax evenly across items



      const payment = Number(sale.payment_amount) || 0;      const payment = Number(sale.payment_amount) || 0;

            

      return (sale.sale_items || []).map(item => {      return (sale.sale_items || []).map(item => {

        if (!item.product) return null;        if (!item.product) return null;

                

        const quantity = Number(item.quantity) || 0;        const quantity = Number(item.quantity) || 0;

        const price = Number(item.price_at_time) || 0;        const price = Number(item.price_at_time) || 0;

        const subtotal = price * quantity;        const subtotal = price * quantity;

        const itemTax = taxPerItem * quantity;        const itemTax = taxPerItem * quantity;

        const total = subtotal + itemTax;        const total = subtotal + itemTax;



        // Escape product name if it contains commas        // Escape product name if it contains commas

        const escapedName = item.product.name.includes(',') ? `"${item.product.name}"` : item.product.name;        const escapedName = item.product.name.includes(',') ? `"${item.product.name}"` : item.product.name;



        return [        return [

          formatDateToLocale(sale.created_at),          formatDateToLocale(sale.created_at),

          sale.invoice_number,          sale.invoice_number,

          escapedName,          escapedName,

          formatCurrency(price),          formatCurrency(price),

          quantity,          quantity,

          formatCurrency(subtotal),          formatCurrency(subtotal),

          formatCurrency(itemTax),          formatCurrency(itemTax),

          formatCurrency(total),          formatCurrency(total),

          formatCurrency(payment),          formatCurrency(payment),

          formatCurrency(payment - total)          formatCurrency(payment - total)

        ].join(',');        ].join(',');

      });      });

    }).filter(row => row !== null);    }).filter(row => row !== null);



    return [headers, ...rows].join('\n');    return [headers, ...rows].join('\n');

  };  };



  const generateProductCSV = (sales: Sale[]) => {  const generateProductCSV = (sales: Sale[]) => {

    // Create a map to aggregate product sales    // Create a map to aggregate product sales

    const productMap = new Map<string, {     const productMap = new Map<string, { 

      name: string;      name: string;

      productId: string;      productId: string;

      quantity: number;      quantity: number;

      revenue: number;      revenue: number;

      price: number;      price: number;

      sku: string | null;      sku: string | null;

      taxes: number;      taxes: number;

      subtotal: number;      subtotal: number;

    }>();    }>();



    sales.forEach(sale => {    sales.forEach(sale => {

      // Only include enabled taxes      // Only include enabled taxes

      const totalTax = (sale.sales_taxes || [])      const totalTax = (sale.sales_taxes || [])

        .filter(tax => tax.tax_types?.enabled ?? false)        .filter(tax => tax.tax_types?.enabled ?? false)

        .reduce((sum, tax) => sum + (Number(tax.tax_amount) || 0), 0);        .reduce((sum, tax) => sum + (Number(tax.tax_amount) || 0), 0);

      const totalItems = (sale.sale_items || []).reduce((sum, item) => sum + (Number(item.quantity) || 0), 0);      const totalItems = (sale.sale_items || []).reduce((sum, item) => sum + (Number(item.quantity) || 0), 0);

      const taxPerItem = totalItems > 0 ? totalTax / totalItems : 0; // Distribute tax evenly across items      const taxPerItem = totalItems > 0 ? totalTax / totalItems : 0; // Distribute tax evenly across items



      (sale.sale_items || []).forEach(item => {      (sale.sale_items || []).forEach(item => {

        if (!item.product_id || !item.product) return;        if (!item.product_id || !item.product) return;

                

        const productId = item.product_id.toString();        const productId = item.product_id.toString();

        const existing = productMap.get(productId) || {        const existing = productMap.get(productId) || {

          name: item.product.name,          name: item.product.name,

          productId,          productId,

          quantity: 0,          quantity: 0,

          revenue: 0,          revenue: 0,

          price: Number(item.price_at_time) || 0,          price: Number(item.price_at_time) || 0,

          sku: item.product.sku,          sku: item.product.sku,

          taxes: 0,          taxes: 0,

          subtotal: 0          subtotal: 0

        };        };

                

        const quantity = Number(item.quantity) || 0;        const quantity = Number(item.quantity) || 0;

        const itemSubtotal = (Number(item.price_at_time) || 0) * quantity;        const itemSubtotal = (Number(item.price_at_time) || 0) * quantity;

        const itemTax = taxPerItem * quantity;        const itemTax = taxPerItem * quantity;



        existing.quantity += quantity;        existing.quantity += quantity;

        existing.subtotal += itemSubtotal;        existing.subtotal += itemSubtotal;

        existing.taxes += itemTax;        existing.taxes += itemTax;

        existing.revenue = existing.subtotal + existing.taxes;        existing.revenue = existing.subtotal + existing.taxes;

                

        productMap.set(productId, existing);        productMap.set(productId, existing);

      });      });

    });    });



    const headers = [    const headers = [

      'SKU',      'SKU',

      'Nama Produk',      'Nama Produk',

      'Harga Satuan',      'Harga Satuan',

      'Jumlah Terjual',      'Jumlah Terjual',

      'Subtotal',      'Subtotal',

      'Pajak',      'Pajak',

      'Total'      'Total'

    ].join(',');    ].join(',');



    const rows = Array.from(productMap.values())    const rows = Array.from(productMap.values())

      .sort((a, b) => b.revenue - a.revenue)      .sort((a, b) => b.revenue - a.revenue)

      .map(product => {      .map(product => {

        // Escape komma in product name to prevent CSV format issues        // Escape komma in product name to prevent CSV format issues

        const escapedName = product.name.includes(',') ? `"${product.name}"` : product.name;        const escapedName = product.name.includes(',') ? `"${product.name}"` : product.name;

                

        return [        return [

          product.sku || product.productId,          product.sku || product.productId,

          escapedName,          escapedName,

          formatCurrency(product.price),          formatCurrency(product.price),

          product.quantity,          product.quantity,

          formatCurrency(product.subtotal),          formatCurrency(product.subtotal),

          formatCurrency(product.taxes),          formatCurrency(product.taxes),

          formatCurrency(product.revenue)          formatCurrency(product.revenue)

        ].join(',');        ].join(',');

      });      });



    return [headers, ...rows].join('\n');    return [headers, ...rows].join('\n');

  };  };



  if (loading) {  if (loading) {

    return (    return (

      <div className="flex items-center justify-center min-h-screen">      <div className="flex items-center justify-center min-h-screen">

        <div className="flex flex-col items-center gap-2">        <div className="flex flex-col items-center gap-2">

          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>

          <p className="text-sm text-gray-600">Loading sales data...</p>          <p className="text-sm text-gray-600">Loading sales data...</p>

        </div>        </div>

      </div>      </div>

    );    );

  }  }



  return (  return (

    <div className="space-y-6 p-6">    <div className="space-y-6 p-6">

      {/* Summary Section */}      {/* Summary Section */}

      <div>      <div>

        <h2 className="text-2xl font-bold mb-4">Ringkasan Laporan</h2>        <h2 className="text-2xl font-bold mb-4">Ringkasan Laporan</h2>

        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">

          {/* Total Revenue Card */}          {/* Total Revenue Card */}

          <MetricCard          <MetricCard

            title="Total Pendapatan"            title="Total Pendapatan"

            value={formatCurrency(totalRevenue)}            value={formatCurrency(totalRevenue)}

            icon={<DollarSign />}            icon={<DollarSign />}

            subValue={`Hari ini: ${formatCurrency(todayStats.revenue)}`}            subValue={`Hari ini: ${formatCurrency(todayStats.revenue)}`}

            trend={todayStats.revenue > 0 ? "up" : undefined}            trend={todayStats.revenue > 0 ? "up" : undefined}

            trendValue={`${getTrendPercentage(todayStats.revenue, totalRevenue).toFixed(1)}%`}            trendValue={`${getTrendPercentage(todayStats.revenue, totalRevenue).toFixed(1)}%`}

          />          />



          {/* Transactions Card */}          {/* Transactions Card */}

          <MetricCard          <MetricCard

            title="Total Transaksi"            title="Total Transaksi"

            value={totalTransactions}            value={totalTransactions}

            icon={<ShoppingCart />}            icon={<ShoppingCart />}

            subValue={`Hari ini: ${todayStats.transactions} transaksi`}            subValue={`Hari ini: ${todayStats.transactions} transaksi`}

            trend={todayStats.transactions > 0 ? "up" : undefined}            trend={todayStats.transactions > 0 ? "up" : undefined}

            trendValue={`${getTrendPercentage(todayStats.transactions, totalTransactions).toFixed(1)}%`}            trendValue={`${getTrendPercentage(todayStats.transactions, totalTransactions).toFixed(1)}%`}

          />          />



          {/* Items Sold Card */}          {/* Items Sold Card */}

          <MetricCard          <MetricCard

            title="Total Item Terjual"            title="Total Item Terjual"

            value={totalItemsSold}            value={totalItemsSold}

            icon={<Package />}            icon={<Package />}

            subValue={`Hari ini: ${todayStats.items} item`}            subValue={`Hari ini: ${todayStats.items} item`}

            trend={todayStats.items > 0 ? "up" : undefined}            trend={todayStats.items > 0 ? "up" : undefined}

            trendValue={`${getTrendPercentage(todayStats.items, totalItemsSold).toFixed(1)}%`}            trendValue={`${getTrendPercentage(todayStats.items, totalItemsSold).toFixed(1)}%`}

          />          />



          {/* Payment Methods Card */}          {/* Payment Methods Card */}

          <MetricCard          <MetricCard

            title="Metode Pembayaran"            title="Metode Pembayaran"

            value={`${paymentStats['cash'] || 0} Tunai`}            value={`${paymentStats['cash'] || 0} Tunai`}

            icon={<CreditCard />}            icon={<CreditCard />}

            subValue={`${paymentStats['card'] || 0} Kartu • ${paymentStats['qris'] || 0} QRIS`}            subValue={`${paymentStats['card'] || 0} Kartu • ${paymentStats['qris'] || 0} QRIS`}

          />          />

        </div>        </div>

      </div>      </div>



      {/* Header with Download Buttons */}      {/* Header with Download Buttons */}

      <div className="flex justify-between items-center mb-6">      <div className="flex justify-between items-center mb-6">

        <h2 className="text-2xl font-bold">Daftar Transaksi</h2>        <h2 className="text-2xl font-bold">Daftar Transaksi</h2>

        <DropdownMenu>        <DropdownMenu>

          <DropdownMenuTrigger asChild>          <DropdownMenuTrigger asChild>

            <Button className="gap-2">            <Button className="gap-2">

              <Download className="h-4 w-4" />              <Download className="h-4 w-4" />

              Download Laporan              Download Laporan

            </Button>            </Button>

          </DropdownMenuTrigger>          </DropdownMenuTrigger>

          <DropdownMenuContent align="end">          <DropdownMenuContent align="end">

            <DropdownMenuItem onClick={downloadProductReport}>            <DropdownMenuItem onClick={downloadProductReport}>

              Ringkasan Per Produk              Ringkasan Per Produk

            </DropdownMenuItem>            </DropdownMenuItem>

            <DropdownMenuItem onClick={downloadSummaryReport}>            <DropdownMenuItem onClick={downloadSummaryReport}>

              Laporan Penjualan Per Transaksi              Laporan Penjualan Per Transaksi

            </DropdownMenuItem>            </DropdownMenuItem>

          </DropdownMenuContent>          </DropdownMenuContent>

        </DropdownMenu>        </DropdownMenu>

      </div>      </div>



      {/* Sales Table */}      {/* Sales Table */}

      <Card>      <Card>

        <CardContent>        <CardContent>

          {sales.length === 0 ? (          {sales.length === 0 ? (

            <div className="text-center py-8">            <div className="text-center py-8">

              <p className="text-muted-foreground">Tidak ada data penjualan</p>              <p className="text-muted-foreground">Tidak ada data penjualan</p>

            </div>            </div>

          ) : (          ) : (

            <div className="relative overflow-x-auto">            <div className="relative overflow-x-auto">

              <Table>              <Table>

                <TableHeader>                <TableHeader>

                  <TableRow>                  <TableRow>

                    <TableHead>ID Transaksi</TableHead>                    <TableHead>ID Transaksi</TableHead>

                    <TableHead>Tanggal</TableHead>                    <TableHead>Tanggal</TableHead>

                    <TableHead>Total</TableHead>                    <TableHead>Total</TableHead>

                    <TableHead>Pembayaran</TableHead>                    <TableHead>Pembayaran</TableHead>

                    <TableHead>Items</TableHead>                    <TableHead>Items</TableHead>

                    <TableHead className="w-[100px]">Aksi</TableHead>                    <TableHead className="w-[100px]">Aksi</TableHead>

                  </TableRow>                  </TableRow>

                </TableHeader>                </TableHeader>

                <TableBody>                <TableBody>

                  {sales.map((sale) => {                  {sales.map((sale) => {

                    // Only include enabled taxes in the tax amount                    // Only include enabled taxes in the tax amount

                    const taxAmount = (sale.sales_taxes || [])                    const taxAmount = (sale.sales_taxes || [])

                      .filter(tax => tax.tax_types?.enabled ?? false)                      .filter(tax => tax.tax_types?.enabled ?? false)

                      .reduce((sum, tax) => sum + (Number(tax.tax_amount) || 0), 0);                      .reduce((sum, tax) => sum + (Number(tax.tax_amount) || 0), 0);



                    const subtotal = (sale.sale_items || []).reduce((sum, item) =>                     return (

                      sum + ((Number(item.price_at_time) || 0) * (Number(item.quantity) || 0)), 0);                      <TableRow key={sale.id} className="group">

                        <TableCell className="font-medium">{sale.id}</TableCell>

                    const total = subtotal + taxAmount;                        <TableCell>

                          {new Date(sale.created_at).toLocaleString('id-ID')}

                    return (                        </TableCell>

                      <TableRow key={sale.id} className="group">                        <TableCell>

                        <TableCell className="font-medium">{sale.id}</TableCell>                          {formatCurrency(Number(sale.total) || 0)}

                        <TableCell>                        </TableCell>

                          {new Date(sale.created_at).toLocaleString('id-ID')}                        <TableCell>

                        </TableCell>                          <Badge 

                        <TableCell>                            variant={sale.payment_method === 'cash' ? 'default' : 'secondary'}

                          {formatCurrency(total)}                            className="capitalize"

                        </TableCell>                          >

                        <TableCell>                            {sale.payment_method === 'cash' ? 'Tunai' : 

                          <Badge                              sale.payment_method === 'qris' ? 'QRIS' : 'Kartu'}

                            variant={sale.payment_method === 'cash' ? 'default' : 'secondary'}                          </Badge>

                            className="capitalize"                        </TableCell>

                          >                        <TableCell>

                            {sale.payment_method === 'cash' ? 'Tunai' :                           {(sale.sale_items || []).length} items

                             sale.payment_method === 'qris' ? 'QRIS' : 'Kartu'}                        </TableCell>

                          </Badge>                        <TableCell>

                        </TableCell>                          <Dialog>

                        <TableCell>                            <DialogTrigger asChild>

                          {(sale.sale_items || []).length} items                              <Button variant="ghost" size="sm">

                        </TableCell>                                <Eye className="h-4 w-4" />

                        <TableCell>                              </Button>

                          <Dialog>                            </DialogTrigger>

                            <DialogTrigger asChild>                            <DialogContent className="max-w-2xl">

                              <Button variant="ghost" size="sm">                              <DialogHeader>

                                <Eye className="h-4 w-4" />                                <DialogTitle>Detail Transaksi #{sale.id}</DialogTitle>

                              </Button>                                <DialogDescription>

                            </DialogTrigger>                                  {new Date(sale.created_at).toLocaleString('id-ID')}

                            <DialogContent className="max-w-2xl">                                </DialogDescription>

                              <DialogHeader>                              </DialogHeader>

                                <DialogTitle>Detail Transaksi #{sale.id}</DialogTitle>                              <div className="space-y-4">

                                <DialogDescription>                                <div className="grid grid-cols-2 gap-4">

                                  {new Date(sale.created_at).toLocaleString('id-ID')}                                  <Card>

                                </DialogDescription>                                    <CardContent className="pt-4">

                              </DialogHeader>                                      <p className="text-sm font-medium mb-1">Total Transaksi</p>

                              <div className="space-y-4">                                      <p className="text-2xl font-bold">

                                <div className="grid grid-cols-2 gap-4">                                        {formatCurrency(Number(sale.total) || 0)}

                                  <Card>                                      </p>

                                    <CardContent className="pt-4">                                    </CardContent>

                                      <p className="text-sm font-medium mb-1">Total Transaksi</p>                                  </Card>

                                      <p className="text-2xl font-bold">                                  <Card>

                                        {formatCurrency(total)}                                    <CardContent className="pt-4">

                                      </p>                                      <p className="text-sm font-medium mb-1">Metode Pembayaran</p>

                                    </CardContent>                                      <Badge 

                                  </Card>                                        variant={sale.payment_method === 'cash' ? 'default' : 'secondary'}

                                  <Card>                                        className="capitalize"

                                    <CardContent className="pt-4">                                      >

                                      <p className="text-sm font-medium mb-1">Metode Pembayaran</p>                                        {sale.payment_method === 'cash' ? 'Tunai' : 

                                      <Badge                                          sale.payment_method === 'qris' ? 'QRIS' : 'Kartu'}

                                        variant={sale.payment_method === 'cash' ? 'default' : 'secondary'}                                      </Badge>

                                        className="capitalize"                                    </CardContent>

                                      >                                  </Card>

                                        {sale.payment_method === 'cash' ? 'Tunai' :                                 </div>

                                         sale.payment_method === 'qris' ? 'QRIS' : 'Kartu'}                                

                                      </Badge>                                <div>

                                    </CardContent>                                  <h4 className="text-sm font-medium mb-3">Detail Produk</h4>

                                  </Card>                                  <div className="space-y-2">

                                </div>                                    {(sale.sale_items || []).map((item, index) => (

                                                                      <div key={index} className="flex justify-between items-center text-sm bg-muted/50 p-3 rounded">

                                <div>                                        <div>

                                  <h4 className="text-sm font-medium mb-3">Detail Produk</h4>                                          <p className="font-medium">{item.product?.name || `Produk #${item.product_id}`}</p>

                                  <div className="space-y-2">                                          <p className="text-xs text-muted-foreground">

                                    {(sale.sale_items || []).map((item, index) => (                                            {formatCurrency(Number(item.price_at_time))} × {item.quantity}

                                      <div key={index} className="flex justify-between items-center text-sm bg-muted/50 p-3 rounded">                                          </p>

                                        <div>                                        </div>

                                          <p className="font-medium">{item.product?.name || `Produk #${item.product_id}`}</p>                                        <p className="font-medium">

                                          <p className="text-xs text-muted-foreground">                                          {formatCurrency(Number(item.price_at_time || 0) * Number(item.quantity || 0))}

                                            {formatCurrency(Number(item.price_at_time))} × {item.quantity}                                        </p>

                                          </p>                                      </div>

                                        </div>                                    ))}

                                        <p className="font-medium">                                  </div>

                                          {formatCurrency(Number(item.price_at_time || 0) * Number(item.quantity || 0))}                                </div>

                                        </p>

                                      </div>                                {Array.isArray(sale.sales_taxes) && sale.sales_taxes.length > 0 && 

                                    ))}                                 sale.sales_taxes.some(tax => tax.tax_types?.enabled) && (

                                  </div>                                  <div>

                                </div>                                    <h4 className="text-sm font-medium mb-3">Rincian Pajak</h4>

                                    <div className="space-y-2">

                                {Array.isArray(sale.sales_taxes) && sale.sales_taxes.length > 0 &&                                       {sale.sales_taxes

                                 sale.sales_taxes.some(tax => tax.tax_types?.enabled) && (                                        .filter(tax => tax.tax_types?.enabled)

                                  <div>                                        .map((tax, index) => (

                                    <h4 className="text-sm font-medium mb-3">Rincian Pajak</h4>                                          <div key={`tax-${index}`} className="flex justify-between text-sm p-2 bg-muted/30 rounded">

                                    <div className="space-y-2">                                            <span>{tax.tax_types?.name || 'Pajak'} ({tax.tax_types?.rate || 0}%)</span>

                                      {sale.sales_taxes                                            <span className="font-medium">

                                        .filter(tax => tax.tax_types?.enabled)                                              {formatCurrency(Number(tax.tax_amount || 0))}

                                        .map((tax, index) => (                                            </span>

                                          <div key={`tax-${index}`} className="flex justify-between text-sm p-2 bg-muted/30 rounded">                                          </div>

                                            <span>{tax.tax_types?.name || 'Pajak'} ({tax.tax_types?.rate || 0}%)</span>                                        ))}

                                            <span className="font-medium">                                    </div>

                                              {formatCurrency(Number(tax.tax_amount || 0))}                                  </div>

                                            </span>                                )}

                                          </div>

                                        ))}                                <div className="border-t pt-4 space-y-2">

                                    </div>                                  <div className="flex justify-between text-sm">

                                  </div>                                    <span className="text-muted-foreground">Subtotal</span>

                                )}                                    <span>{formatCurrency(Number(sale.subtotal || 0))}</span>

                                  </div>

                                <div className="border-t pt-4 space-y-2">                                  {taxAmount > 0 && (

                                  <div className="flex justify-between text-sm">                                    <div className="flex justify-between text-sm">

                                    <span className="text-muted-foreground">Subtotal</span>                                      <span className="text-muted-foreground">Total Pajak</span>

                                    <span>{formatCurrency(subtotal)}</span>                                      <span>{formatCurrency(taxAmount)}</span>

                                  </div>                                    </div>

                                  {taxAmount > 0 && (                                  )}

                                    <div className="flex justify-between text-sm">                                  <div className="flex justify-between text-lg font-bold pt-2">

                                      <span className="text-muted-foreground">Total Pajak</span>                                    <span>Total</span>

                                      <span>{formatCurrency(taxAmount)}</span>                                    <span>{formatCurrency(Number(sale.total) || 0)}</span>

                                    </div>                                  </div>

                                  )}                                </div>

                                  <div className="flex justify-between text-lg font-bold pt-2">                              </div>

                                    <span>Total</span>                            </DialogContent>

                                    <span>{formatCurrency(total)}</span>                          </Dialog>

                                  </div>                        </TableCell>

                                </div>                      </TableRow>

                              </div>                    );

                            </DialogContent>                  })}

                          </Dialog>                </TableBody>

                        </TableCell>              </Table>

                      </TableRow>            </div>

                    );          )}

                  })}        </CardContent>

                </TableBody>      </Card>

              </Table>    </div>

            </div>  );

          )}};

        </CardContent>

      </Card>export default Reports;
    </div>
  );
};

export default Reports;