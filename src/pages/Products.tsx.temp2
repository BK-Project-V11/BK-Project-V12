interface StockAdjustment {
  type: 'increase' | 'decrease';
  reason: string;
  quantity: number;
  note?: string;
}

const Products = () => {
  const posContext = usePOS();
  const { state, deleteProduct, addProduct, updateProduct } = posContext;
  const { user } = useAuth();
  const isAdmin = user?.user_metadata?.role === 'admin';
  const [cashiers, setCashiers] = useState<Array<{ id: string; name: string }>>([]);

  useEffect(() => {
    if (!user) {
      toast({
        title: "Akses Ditolak",
        description: "Anda harus login terlebih dahulu.",
        variant: "destructive"
      });
      return;
    }
  }, [user]);

  useEffect(() => {
    const fetchCashiers = async () => {
      try {
        const { data, error } = await supabase
          .from('users')
          .select('id, full_name')
          .eq('role', 'cashier');

        if (error) throw error;
        setCashiers(data.map(user => ({ id: user.id, name: user.full_name })));
      } catch (error) {
        console.error('Error fetching cashiers:', error);
        toast({
          title: "Error",
          description: "Gagal mengambil data kasir",
          variant: "destructive",
        });
      }
    };

    if (isAdmin) {
      fetchCashiers();
    }
  }, [isAdmin]);

  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [editingProduct, setEditingProduct] = useState<Product | null>(null);
  const [isStockAdjustmentOpen, setIsStockAdjustmentOpen] = useState(false);
  const [stockAdjustment, setStockAdjustment] = useState<StockAdjustment>({
    type: 'increase',
    reason: '',
    quantity: 1,
    note: ''
  });
  const [adjustingProduct, setAdjustingProduct] = useState<Product | null>(null);
  const [formData, setFormData] = useState<Omit<Product, 'id'>>({
    name: '',
    sku: '',
    price: 0,
    stock: 0,
    category: '',
    description: '',
    image: undefined
  });

  const categories = ['all', ...Array.from(new Set(state.products.map(p => p.category)))];

  const resetForm = () => {
    setFormData({
      name: '',
      sku: '',
      price: 0,
      stock: 0,
      category: '',
      description: '',
      image: undefined
    });
    setEditingProduct(null);
    setIsAddDialogOpen(false);
  };

  const handleEdit = (product: Product) => {
    if (!isAdmin) {
      toast({
        title: "Akses Ditolak",
        description: "Hanya administrator yang dapat mengubah produk.",
        variant: "destructive"
      });
      return;
    }

    setEditingProduct(product);
    setFormData({
      name: product.name,
      sku: product.sku,
      price: product.price,
      stock: product.stock,
      category: product.category,
      description: product.description || ''
    });
    setIsAddDialogOpen(true);
  };

  const handleDelete = async (product: Product) => {
    if (!isAdmin) {
      toast({
        title: "Akses Ditolak", 
        description: "Hanya administrator yang dapat menghapus produk.",
        variant: "destructive"
      });
      return;
    }

    try {
      await deleteProduct(product.id);
      toast({
        title: "Produk dihapus",
        description: `${product.name} telah dihapus dari katalog.`,
      });
    } catch (error) {
      console.error('Error deleting product:', error);
      toast({
        title: "Gagal menghapus produk",
        description: "Terjadi kesalahan saat menghapus produk.",
        variant: "destructive",
      });
    }
  };

  const filteredProducts = state.products.filter(product => {
    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         product.sku.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = selectedCategory === 'all' || product.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-3xl font-bold text-foreground">Manajemen Produk</h1>
          <p className="text-muted-foreground">Kelola inventaris dan katalog produk Anda</p>
        </div>
        
        <div className="flex items-center gap-2">
          <ProductPermissions allowEdit={true}>
            <DialogTrigger asChild>
              <Button onClick={resetForm} className="bg-gradient-to-r from-primary to-primary/80">
                <IconWrapper icon={Plus} className="h-4 w-4 mr-2" />
                Tambah Produk (Legacy)
              </Button>
            </DialogTrigger>
          </ProductPermissions>

          <ProductPermissions allowEdit={true}>
            <ProductAllocationDialog
              onSuccess={async () => {
                toast({
                  title: "Sukses",
                  description: "Produk berhasil ditambahkan dan dialokasikan",
                });
                
                // Refresh products list
                const { data: products } = await supabase
                  .from('products')
                  .select('*');
                
                if (products) {
                  posContext.dispatch({
                    type: 'SET_PRODUCTS',
                    payload: products
                  });
                }
              }}
              cashiers={cashiers}
            />
          </ProductPermissions>
        </div>
      </div>

      <div className="flex flex-col sm:flex-row gap-4">
        <div className="flex-1">
          <div className="relative">
            <IconWrapper icon={Search} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
            <Input
              placeholder="Cari produk..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>
        </div>
        <select
          value={selectedCategory}
          onChange={(e) => setSelectedCategory(e.target.value)}
          className="px-3 py-2 border border-input bg-background text-foreground rounded-md focus:outline-none focus:ring-2 focus:ring-ring"
        >
          {categories.map(category => (
            <option key={category} value={category}>
              {category === 'all' ? 'Semua Kategori' : category}
            </option>
          ))}
        </select>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {filteredProducts.map(product => (
          <Card key={product.id} className="hover:shadow-lg transition-shadow">
            <CardHeader className="pb-3">
              <div className="flex justify-between items-start">
                <div className="flex-1">
                  <CardTitle className="text-lg">{product.name}</CardTitle>
                  <p className="text-sm text-muted-foreground">{product.sku}</p>
                </div>
                <div className="flex items-center gap-2">
                  <ProductPermissions allowEdit={true}>
                    <div className="flex items-center gap-2">
                      <StockAdjustmentDialog 
                        product={product} 
                        onSuccess={async () => {
                          const { data: products } = await supabase
                            .from('products')
                            .select('*');
                          
                          if (products) {
                            posContext.dispatch({
                              type: 'SET_PRODUCTS',
                              payload: products
                            });
                          }
                        }} 
                      />
                      <StockHistoryDialog product={product} />
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleEdit(product)}
                      >
                        <IconWrapper icon={Edit2} className="h-4 w-4" />
                      </Button>
                    </div>

                    <AlertDialog>
                      <AlertDialogTrigger asChild>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="text-red-500 hover:text-red-700"
                        >
                          <IconWrapper icon={Trash2} className="h-4 w-4" />
                        </Button>
                      </AlertDialogTrigger>
                      <AlertDialogContent>
                        <AlertDialogHeader>
                          <AlertDialogTitle>Konfirmasi Penghapusan Produk</AlertDialogTitle>
                          <AlertDialogDescription className="space-y-2">
                            <p>Anda akan menghapus produk berikut:</p>
                            <div className="font-medium">
                              <p>Nama: {product.name}</p>
                              <p>SKU: {product.sku}</p>
                              <p>Stok: {product.stock} unit</p>
                            </div>
                            <p className="text-red-500">
                              PERHATIAN: Produk yang memiliki riwayat transaksi penjualan tidak dapat dihapus 
                              untuk menjaga integritas data laporan penjualan.
                            </p>
                          </AlertDialogDescription>
                        </AlertDialogHeader>
                        <AlertDialogFooter>
                          <AlertDialogCancel>Batal</AlertDialogCancel>
                          <AlertDialogAction onClick={() => handleDelete(product)}>Hapus</AlertDialogAction>
                        </AlertDialogFooter>
                      </AlertDialogContent>
                    </AlertDialog>
                  </ProductPermissions>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <div className="flex justify-between items-start">
                  <div className="space-y-1">
                    <Label>Kategori</Label>
                    <Badge variant="secondary">{product.category}</Badge>
                  </div>
                  <div className="text-right">
                    <Label>Stok</Label>
                    <p className={`font-medium ${product.stock <= 10 ? 'text-red-500' : ''}`}>
                      {product.stock} unit
                    </p>
                  </div>
                </div>
                <div>
                  <Label>Harga</Label>
                  <p className="font-medium">
                    Rp {product.price.toLocaleString('id-ID')}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
};

export default Products;